/**
 * @fileoverview gRPC-Web generated client stub for dozer.common
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: common.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as common_pb from './common_pb';
import * as types_pb from './types_pb';


export class CommonGrpcServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorcount = new grpcWeb.MethodDescriptor(
    '/dozer.common.CommonGrpcService/count',
    grpcWeb.MethodType.UNARY,
    common_pb.QueryRequest,
    common_pb.CountResponse,
    (request: common_pb.QueryRequest) => {
      return request.serializeBinary();
    },
    common_pb.CountResponse.deserializeBinary
  );

  count(
    request: common_pb.QueryRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.CountResponse>;

  count(
    request: common_pb.QueryRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.CountResponse) => void): grpcWeb.ClientReadableStream<common_pb.CountResponse>;

  count(
    request: common_pb.QueryRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.CountResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/dozer.common.CommonGrpcService/count',
        request,
        metadata || {},
        this.methodDescriptorcount,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/dozer.common.CommonGrpcService/count',
    request,
    metadata || {},
    this.methodDescriptorcount);
  }

  methodDescriptorquery = new grpcWeb.MethodDescriptor(
    '/dozer.common.CommonGrpcService/query',
    grpcWeb.MethodType.UNARY,
    common_pb.QueryRequest,
    common_pb.QueryResponse,
    (request: common_pb.QueryRequest) => {
      return request.serializeBinary();
    },
    common_pb.QueryResponse.deserializeBinary
  );

  query(
    request: common_pb.QueryRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.QueryResponse>;

  query(
    request: common_pb.QueryRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.QueryResponse) => void): grpcWeb.ClientReadableStream<common_pb.QueryResponse>;

  query(
    request: common_pb.QueryRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.QueryResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/dozer.common.CommonGrpcService/query',
        request,
        metadata || {},
        this.methodDescriptorquery,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/dozer.common.CommonGrpcService/query',
    request,
    metadata || {},
    this.methodDescriptorquery);
  }

  methodDescriptorOnEvent = new grpcWeb.MethodDescriptor(
    '/dozer.common.CommonGrpcService/OnEvent',
    grpcWeb.MethodType.SERVER_STREAMING,
    common_pb.OnEventRequest,
    types_pb.Operation,
    (request: common_pb.OnEventRequest) => {
      return request.serializeBinary();
    },
    types_pb.Operation.deserializeBinary
  );

  onEvent(
    request: common_pb.OnEventRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<types_pb.Operation> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/dozer.common.CommonGrpcService/OnEvent',
      request,
      metadata || {},
      this.methodDescriptorOnEvent);
  }

  methodDescriptorgetEndpoints = new grpcWeb.MethodDescriptor(
    '/dozer.common.CommonGrpcService/getEndpoints',
    grpcWeb.MethodType.UNARY,
    common_pb.GetEndpointsRequest,
    common_pb.GetEndpointsResponse,
    (request: common_pb.GetEndpointsRequest) => {
      return request.serializeBinary();
    },
    common_pb.GetEndpointsResponse.deserializeBinary
  );

  getEndpoints(
    request: common_pb.GetEndpointsRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.GetEndpointsResponse>;

  getEndpoints(
    request: common_pb.GetEndpointsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.GetEndpointsResponse) => void): grpcWeb.ClientReadableStream<common_pb.GetEndpointsResponse>;

  getEndpoints(
    request: common_pb.GetEndpointsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.GetEndpointsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/dozer.common.CommonGrpcService/getEndpoints',
        request,
        metadata || {},
        this.methodDescriptorgetEndpoints,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/dozer.common.CommonGrpcService/getEndpoints',
    request,
    metadata || {},
    this.methodDescriptorgetEndpoints);
  }

  methodDescriptorgetFields = new grpcWeb.MethodDescriptor(
    '/dozer.common.CommonGrpcService/getFields',
    grpcWeb.MethodType.UNARY,
    common_pb.GetFieldsRequest,
    common_pb.GetFieldsResponse,
    (request: common_pb.GetFieldsRequest) => {
      return request.serializeBinary();
    },
    common_pb.GetFieldsResponse.deserializeBinary
  );

  getFields(
    request: common_pb.GetFieldsRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.GetFieldsResponse>;

  getFields(
    request: common_pb.GetFieldsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.GetFieldsResponse) => void): grpcWeb.ClientReadableStream<common_pb.GetFieldsResponse>;

  getFields(
    request: common_pb.GetFieldsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.GetFieldsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/dozer.common.CommonGrpcService/getFields',
        request,
        metadata || {},
        this.methodDescriptorgetFields,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/dozer.common.CommonGrpcService/getFields',
    request,
    metadata || {},
    this.methodDescriptorgetFields);
  }

}

