// source: protos/types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.dozer.types.EventType', null, global);
goog.exportSymbol('proto.dozer.types.FieldDefinition', null, global);
goog.exportSymbol('proto.dozer.types.Operation', null, global);
goog.exportSymbol('proto.dozer.types.OperationType', null, global);
goog.exportSymbol('proto.dozer.types.PointType', null, global);
goog.exportSymbol('proto.dozer.types.Record', null, global);
goog.exportSymbol('proto.dozer.types.RecordWithId', null, global);
goog.exportSymbol('proto.dozer.types.RustDecimal', null, global);
goog.exportSymbol('proto.dozer.types.SchemaEvent', null, global);
goog.exportSymbol('proto.dozer.types.Type', null, global);
goog.exportSymbol('proto.dozer.types.Value', null, global);
goog.exportSymbol('proto.dozer.types.Value.ValueCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dozer.types.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dozer.types.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dozer.types.Operation.displayName = 'proto.dozer.types.Operation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dozer.types.Record = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dozer.types.Record.repeatedFields_, null);
};
goog.inherits(proto.dozer.types.Record, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dozer.types.Record.displayName = 'proto.dozer.types.Record';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dozer.types.RecordWithId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dozer.types.RecordWithId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dozer.types.RecordWithId.displayName = 'proto.dozer.types.RecordWithId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dozer.types.SchemaEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dozer.types.SchemaEvent.repeatedFields_, null);
};
goog.inherits(proto.dozer.types.SchemaEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dozer.types.SchemaEvent.displayName = 'proto.dozer.types.SchemaEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dozer.types.FieldDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dozer.types.FieldDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dozer.types.FieldDefinition.displayName = 'proto.dozer.types.FieldDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dozer.types.PointType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dozer.types.PointType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dozer.types.PointType.displayName = 'proto.dozer.types.PointType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dozer.types.RustDecimal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dozer.types.RustDecimal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dozer.types.RustDecimal.displayName = 'proto.dozer.types.RustDecimal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dozer.types.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.dozer.types.Value.oneofGroups_);
};
goog.inherits(proto.dozer.types.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dozer.types.Value.displayName = 'proto.dozer.types.Value';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dozer.types.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.dozer.types.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dozer.types.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dozer.types.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    typ: jspb.Message.getFieldWithDefault(msg, 1, 0),
    old: (f = msg.getOld()) && proto.dozer.types.Record.toObject(includeInstance, f),
    pb_new: (f = msg.getNew()) && proto.dozer.types.Record.toObject(includeInstance, f),
    newId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    endpointName: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dozer.types.Operation}
 */
proto.dozer.types.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dozer.types.Operation;
  return proto.dozer.types.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dozer.types.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dozer.types.Operation}
 */
proto.dozer.types.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dozer.types.OperationType} */ (reader.readEnum());
      msg.setTyp(value);
      break;
    case 2:
      var value = new proto.dozer.types.Record;
      reader.readMessage(value,proto.dozer.types.Record.deserializeBinaryFromReader);
      msg.setOld(value);
      break;
    case 3:
      var value = new proto.dozer.types.Record;
      reader.readMessage(value,proto.dozer.types.Record.deserializeBinaryFromReader);
      msg.setNew(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNewId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndpointName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dozer.types.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dozer.types.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dozer.types.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dozer.types.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTyp();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOld();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dozer.types.Record.serializeBinaryToWriter
    );
  }
  f = message.getNew();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dozer.types.Record.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getEndpointName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional OperationType typ = 1;
 * @return {!proto.dozer.types.OperationType}
 */
proto.dozer.types.Operation.prototype.getTyp = function() {
  return /** @type {!proto.dozer.types.OperationType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.dozer.types.OperationType} value
 * @return {!proto.dozer.types.Operation} returns this
 */
proto.dozer.types.Operation.prototype.setTyp = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Record old = 2;
 * @return {?proto.dozer.types.Record}
 */
proto.dozer.types.Operation.prototype.getOld = function() {
  return /** @type{?proto.dozer.types.Record} */ (
    jspb.Message.getWrapperField(this, proto.dozer.types.Record, 2));
};


/**
 * @param {?proto.dozer.types.Record|undefined} value
 * @return {!proto.dozer.types.Operation} returns this
*/
proto.dozer.types.Operation.prototype.setOld = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dozer.types.Operation} returns this
 */
proto.dozer.types.Operation.prototype.clearOld = function() {
  return this.setOld(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dozer.types.Operation.prototype.hasOld = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Record new = 3;
 * @return {?proto.dozer.types.Record}
 */
proto.dozer.types.Operation.prototype.getNew = function() {
  return /** @type{?proto.dozer.types.Record} */ (
    jspb.Message.getWrapperField(this, proto.dozer.types.Record, 3));
};


/**
 * @param {?proto.dozer.types.Record|undefined} value
 * @return {!proto.dozer.types.Operation} returns this
*/
proto.dozer.types.Operation.prototype.setNew = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dozer.types.Operation} returns this
 */
proto.dozer.types.Operation.prototype.clearNew = function() {
  return this.setNew(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dozer.types.Operation.prototype.hasNew = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 new_id = 4;
 * @return {number}
 */
proto.dozer.types.Operation.prototype.getNewId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.dozer.types.Operation} returns this
 */
proto.dozer.types.Operation.prototype.setNewId = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dozer.types.Operation} returns this
 */
proto.dozer.types.Operation.prototype.clearNewId = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dozer.types.Operation.prototype.hasNewId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string endpoint_name = 5;
 * @return {string}
 */
proto.dozer.types.Operation.prototype.getEndpointName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.dozer.types.Operation} returns this
 */
proto.dozer.types.Operation.prototype.setEndpointName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dozer.types.Record.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dozer.types.Record.prototype.toObject = function(opt_includeInstance) {
  return proto.dozer.types.Record.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dozer.types.Record} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dozer.types.Record.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.dozer.types.Value.toObject, includeInstance),
    version: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dozer.types.Record}
 */
proto.dozer.types.Record.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dozer.types.Record;
  return proto.dozer.types.Record.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dozer.types.Record} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dozer.types.Record}
 */
proto.dozer.types.Record.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dozer.types.Value;
      reader.readMessage(value,proto.dozer.types.Value.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dozer.types.Record.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dozer.types.Record.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dozer.types.Record} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dozer.types.Record.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.dozer.types.Value.serializeBinaryToWriter
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * repeated Value values = 1;
 * @return {!Array<!proto.dozer.types.Value>}
 */
proto.dozer.types.Record.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.dozer.types.Value>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dozer.types.Value, 1));
};


/**
 * @param {!Array<!proto.dozer.types.Value>} value
 * @return {!proto.dozer.types.Record} returns this
*/
proto.dozer.types.Record.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.dozer.types.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dozer.types.Value}
 */
proto.dozer.types.Record.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.dozer.types.Value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dozer.types.Record} returns this
 */
proto.dozer.types.Record.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};


/**
 * optional uint32 version = 2;
 * @return {number}
 */
proto.dozer.types.Record.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.dozer.types.Record} returns this
 */
proto.dozer.types.Record.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dozer.types.RecordWithId.prototype.toObject = function(opt_includeInstance) {
  return proto.dozer.types.RecordWithId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dozer.types.RecordWithId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dozer.types.RecordWithId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    record: (f = msg.getRecord()) && proto.dozer.types.Record.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dozer.types.RecordWithId}
 */
proto.dozer.types.RecordWithId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dozer.types.RecordWithId;
  return proto.dozer.types.RecordWithId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dozer.types.RecordWithId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dozer.types.RecordWithId}
 */
proto.dozer.types.RecordWithId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.dozer.types.Record;
      reader.readMessage(value,proto.dozer.types.Record.deserializeBinaryFromReader);
      msg.setRecord(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dozer.types.RecordWithId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dozer.types.RecordWithId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dozer.types.RecordWithId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dozer.types.RecordWithId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRecord();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dozer.types.Record.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.dozer.types.RecordWithId.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.dozer.types.RecordWithId} returns this
 */
proto.dozer.types.RecordWithId.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Record record = 2;
 * @return {?proto.dozer.types.Record}
 */
proto.dozer.types.RecordWithId.prototype.getRecord = function() {
  return /** @type{?proto.dozer.types.Record} */ (
    jspb.Message.getWrapperField(this, proto.dozer.types.Record, 2));
};


/**
 * @param {?proto.dozer.types.Record|undefined} value
 * @return {!proto.dozer.types.RecordWithId} returns this
*/
proto.dozer.types.RecordWithId.prototype.setRecord = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dozer.types.RecordWithId} returns this
 */
proto.dozer.types.RecordWithId.prototype.clearRecord = function() {
  return this.setRecord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dozer.types.RecordWithId.prototype.hasRecord = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dozer.types.SchemaEvent.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dozer.types.SchemaEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.dozer.types.SchemaEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dozer.types.SchemaEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dozer.types.SchemaEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    endpoint: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, 0),
    primaryIndexList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.dozer.types.FieldDefinition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dozer.types.SchemaEvent}
 */
proto.dozer.types.SchemaEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dozer.types.SchemaEvent;
  return proto.dozer.types.SchemaEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dozer.types.SchemaEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dozer.types.SchemaEvent}
 */
proto.dozer.types.SchemaEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndpoint(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPrimaryIndex(values[i]);
      }
      break;
    case 4:
      var value = new proto.dozer.types.FieldDefinition;
      reader.readMessage(value,proto.dozer.types.FieldDefinition.deserializeBinaryFromReader);
      msg.addFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dozer.types.SchemaEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dozer.types.SchemaEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dozer.types.SchemaEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dozer.types.SchemaEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEndpoint();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getPrimaryIndexList();
  if (f.length > 0) {
    writer.writePackedInt32(
      3,
      f
    );
  }
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.dozer.types.FieldDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * optional string endpoint = 1;
 * @return {string}
 */
proto.dozer.types.SchemaEvent.prototype.getEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dozer.types.SchemaEvent} returns this
 */
proto.dozer.types.SchemaEvent.prototype.setEndpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 version = 2;
 * @return {number}
 */
proto.dozer.types.SchemaEvent.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.dozer.types.SchemaEvent} returns this
 */
proto.dozer.types.SchemaEvent.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated int32 primary_index = 3;
 * @return {!Array<number>}
 */
proto.dozer.types.SchemaEvent.prototype.getPrimaryIndexList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.dozer.types.SchemaEvent} returns this
 */
proto.dozer.types.SchemaEvent.prototype.setPrimaryIndexList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.dozer.types.SchemaEvent} returns this
 */
proto.dozer.types.SchemaEvent.prototype.addPrimaryIndex = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dozer.types.SchemaEvent} returns this
 */
proto.dozer.types.SchemaEvent.prototype.clearPrimaryIndexList = function() {
  return this.setPrimaryIndexList([]);
};


/**
 * repeated FieldDefinition fields = 4;
 * @return {!Array<!proto.dozer.types.FieldDefinition>}
 */
proto.dozer.types.SchemaEvent.prototype.getFieldsList = function() {
  return /** @type{!Array<!proto.dozer.types.FieldDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dozer.types.FieldDefinition, 4));
};


/**
 * @param {!Array<!proto.dozer.types.FieldDefinition>} value
 * @return {!proto.dozer.types.SchemaEvent} returns this
*/
proto.dozer.types.SchemaEvent.prototype.setFieldsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.dozer.types.FieldDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dozer.types.FieldDefinition}
 */
proto.dozer.types.SchemaEvent.prototype.addFields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.dozer.types.FieldDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dozer.types.SchemaEvent} returns this
 */
proto.dozer.types.SchemaEvent.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dozer.types.FieldDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.dozer.types.FieldDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dozer.types.FieldDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dozer.types.FieldDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    typ: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nullable: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dozer.types.FieldDefinition}
 */
proto.dozer.types.FieldDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dozer.types.FieldDefinition;
  return proto.dozer.types.FieldDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dozer.types.FieldDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dozer.types.FieldDefinition}
 */
proto.dozer.types.FieldDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dozer.types.Type} */ (reader.readEnum());
      msg.setTyp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNullable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dozer.types.FieldDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dozer.types.FieldDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dozer.types.FieldDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dozer.types.FieldDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTyp();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNullable();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional Type typ = 1;
 * @return {!proto.dozer.types.Type}
 */
proto.dozer.types.FieldDefinition.prototype.getTyp = function() {
  return /** @type {!proto.dozer.types.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.dozer.types.Type} value
 * @return {!proto.dozer.types.FieldDefinition} returns this
 */
proto.dozer.types.FieldDefinition.prototype.setTyp = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.dozer.types.FieldDefinition.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dozer.types.FieldDefinition} returns this
 */
proto.dozer.types.FieldDefinition.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool nullable = 3;
 * @return {boolean}
 */
proto.dozer.types.FieldDefinition.prototype.getNullable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dozer.types.FieldDefinition} returns this
 */
proto.dozer.types.FieldDefinition.prototype.setNullable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dozer.types.PointType.prototype.toObject = function(opt_includeInstance) {
  return proto.dozer.types.PointType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dozer.types.PointType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dozer.types.PointType.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dozer.types.PointType}
 */
proto.dozer.types.PointType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dozer.types.PointType;
  return proto.dozer.types.PointType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dozer.types.PointType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dozer.types.PointType}
 */
proto.dozer.types.PointType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dozer.types.PointType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dozer.types.PointType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dozer.types.PointType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dozer.types.PointType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.dozer.types.PointType.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.dozer.types.PointType} returns this
 */
proto.dozer.types.PointType.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.dozer.types.PointType.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.dozer.types.PointType} returns this
 */
proto.dozer.types.PointType.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dozer.types.RustDecimal.prototype.toObject = function(opt_includeInstance) {
  return proto.dozer.types.RustDecimal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dozer.types.RustDecimal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dozer.types.RustDecimal.toObject = function(includeInstance, msg) {
  var f, obj = {
    flags: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lo: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hi: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dozer.types.RustDecimal}
 */
proto.dozer.types.RustDecimal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dozer.types.RustDecimal;
  return proto.dozer.types.RustDecimal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dozer.types.RustDecimal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dozer.types.RustDecimal}
 */
proto.dozer.types.RustDecimal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dozer.types.RustDecimal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dozer.types.RustDecimal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dozer.types.RustDecimal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dozer.types.RustDecimal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLo();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getHi();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 flags = 1;
 * @return {number}
 */
proto.dozer.types.RustDecimal.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.dozer.types.RustDecimal} returns this
 */
proto.dozer.types.RustDecimal.prototype.setFlags = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 lo = 2;
 * @return {number}
 */
proto.dozer.types.RustDecimal.prototype.getLo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.dozer.types.RustDecimal} returns this
 */
proto.dozer.types.RustDecimal.prototype.setLo = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 mid = 3;
 * @return {number}
 */
proto.dozer.types.RustDecimal.prototype.getMid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.dozer.types.RustDecimal} returns this
 */
proto.dozer.types.RustDecimal.prototype.setMid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 hi = 4;
 * @return {number}
 */
proto.dozer.types.RustDecimal.prototype.getHi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.dozer.types.RustDecimal} returns this
 */
proto.dozer.types.RustDecimal.prototype.setHi = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.dozer.types.Value.oneofGroups_ = [[1,2,3,4,5,7,8,9,10,11]];

/**
 * @enum {number}
 */
proto.dozer.types.Value.ValueCase = {
  VALUE_NOT_SET: 0,
  UINT_VALUE: 1,
  INT_VALUE: 2,
  FLOAT_VALUE: 3,
  BOOL_VALUE: 4,
  STRING_VALUE: 5,
  BYTES_VALUE: 7,
  DECIMAL_VALUE: 8,
  TIMESTAMP_VALUE: 9,
  DATE_VALUE: 10,
  POINT_VALUE: 11
};

/**
 * @return {proto.dozer.types.Value.ValueCase}
 */
proto.dozer.types.Value.prototype.getValueCase = function() {
  return /** @type {proto.dozer.types.Value.ValueCase} */(jspb.Message.computeOneofCase(this, proto.dozer.types.Value.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dozer.types.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.dozer.types.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dozer.types.Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dozer.types.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    uintValue: jspb.Message.getFieldWithDefault(msg, 1, 0),
    intValue: jspb.Message.getFieldWithDefault(msg, 2, 0),
    floatValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    boolValue: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    stringValue: jspb.Message.getFieldWithDefault(msg, 5, ""),
    bytesValue: msg.getBytesValue_asB64(),
    decimalValue: (f = msg.getDecimalValue()) && proto.dozer.types.RustDecimal.toObject(includeInstance, f),
    timestampValue: (f = msg.getTimestampValue()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    dateValue: jspb.Message.getFieldWithDefault(msg, 10, ""),
    pointValue: (f = msg.getPointValue()) && proto.dozer.types.PointType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dozer.types.Value}
 */
proto.dozer.types.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dozer.types.Value;
  return proto.dozer.types.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dozer.types.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dozer.types.Value}
 */
proto.dozer.types.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUintValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFloatValue(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesValue(value);
      break;
    case 8:
      var value = new proto.dozer.types.RustDecimal;
      reader.readMessage(value,proto.dozer.types.RustDecimal.deserializeBinaryFromReader);
      msg.setDecimalValue(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestampValue(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateValue(value);
      break;
    case 11:
      var value = new proto.dozer.types.PointType;
      reader.readMessage(value,proto.dozer.types.PointType.deserializeBinaryFromReader);
      msg.setPointValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dozer.types.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dozer.types.Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dozer.types.Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dozer.types.Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getDecimalValue();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.dozer.types.RustDecimal.serializeBinaryToWriter
    );
  }
  f = message.getTimestampValue();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getPointValue();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.dozer.types.PointType.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 uint_value = 1;
 * @return {number}
 */
proto.dozer.types.Value.prototype.getUintValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.dozer.types.Value} returns this
 */
proto.dozer.types.Value.prototype.setUintValue = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.dozer.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dozer.types.Value} returns this
 */
proto.dozer.types.Value.prototype.clearUintValue = function() {
  return jspb.Message.setOneofField(this, 1, proto.dozer.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dozer.types.Value.prototype.hasUintValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 int_value = 2;
 * @return {number}
 */
proto.dozer.types.Value.prototype.getIntValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.dozer.types.Value} returns this
 */
proto.dozer.types.Value.prototype.setIntValue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.dozer.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dozer.types.Value} returns this
 */
proto.dozer.types.Value.prototype.clearIntValue = function() {
  return jspb.Message.setOneofField(this, 2, proto.dozer.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dozer.types.Value.prototype.hasIntValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double float_value = 3;
 * @return {number}
 */
proto.dozer.types.Value.prototype.getFloatValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.dozer.types.Value} returns this
 */
proto.dozer.types.Value.prototype.setFloatValue = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.dozer.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dozer.types.Value} returns this
 */
proto.dozer.types.Value.prototype.clearFloatValue = function() {
  return jspb.Message.setOneofField(this, 3, proto.dozer.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dozer.types.Value.prototype.hasFloatValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool bool_value = 4;
 * @return {boolean}
 */
proto.dozer.types.Value.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dozer.types.Value} returns this
 */
proto.dozer.types.Value.prototype.setBoolValue = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.dozer.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dozer.types.Value} returns this
 */
proto.dozer.types.Value.prototype.clearBoolValue = function() {
  return jspb.Message.setOneofField(this, 4, proto.dozer.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dozer.types.Value.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string string_value = 5;
 * @return {string}
 */
proto.dozer.types.Value.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.dozer.types.Value} returns this
 */
proto.dozer.types.Value.prototype.setStringValue = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.dozer.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dozer.types.Value} returns this
 */
proto.dozer.types.Value.prototype.clearStringValue = function() {
  return jspb.Message.setOneofField(this, 5, proto.dozer.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dozer.types.Value.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes bytes_value = 7;
 * @return {!(string|Uint8Array)}
 */
proto.dozer.types.Value.prototype.getBytesValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes bytes_value = 7;
 * This is a type-conversion wrapper around `getBytesValue()`
 * @return {string}
 */
proto.dozer.types.Value.prototype.getBytesValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesValue()));
};


/**
 * optional bytes bytes_value = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesValue()`
 * @return {!Uint8Array}
 */
proto.dozer.types.Value.prototype.getBytesValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dozer.types.Value} returns this
 */
proto.dozer.types.Value.prototype.setBytesValue = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.dozer.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dozer.types.Value} returns this
 */
proto.dozer.types.Value.prototype.clearBytesValue = function() {
  return jspb.Message.setOneofField(this, 7, proto.dozer.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dozer.types.Value.prototype.hasBytesValue = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional RustDecimal decimal_value = 8;
 * @return {?proto.dozer.types.RustDecimal}
 */
proto.dozer.types.Value.prototype.getDecimalValue = function() {
  return /** @type{?proto.dozer.types.RustDecimal} */ (
    jspb.Message.getWrapperField(this, proto.dozer.types.RustDecimal, 8));
};


/**
 * @param {?proto.dozer.types.RustDecimal|undefined} value
 * @return {!proto.dozer.types.Value} returns this
*/
proto.dozer.types.Value.prototype.setDecimalValue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.dozer.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dozer.types.Value} returns this
 */
proto.dozer.types.Value.prototype.clearDecimalValue = function() {
  return this.setDecimalValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dozer.types.Value.prototype.hasDecimalValue = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional google.protobuf.Timestamp timestamp_value = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.dozer.types.Value.prototype.getTimestampValue = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.dozer.types.Value} returns this
*/
proto.dozer.types.Value.prototype.setTimestampValue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.dozer.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dozer.types.Value} returns this
 */
proto.dozer.types.Value.prototype.clearTimestampValue = function() {
  return this.setTimestampValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dozer.types.Value.prototype.hasTimestampValue = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string date_value = 10;
 * @return {string}
 */
proto.dozer.types.Value.prototype.getDateValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.dozer.types.Value} returns this
 */
proto.dozer.types.Value.prototype.setDateValue = function(value) {
  return jspb.Message.setOneofField(this, 10, proto.dozer.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dozer.types.Value} returns this
 */
proto.dozer.types.Value.prototype.clearDateValue = function() {
  return jspb.Message.setOneofField(this, 10, proto.dozer.types.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dozer.types.Value.prototype.hasDateValue = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional PointType point_value = 11;
 * @return {?proto.dozer.types.PointType}
 */
proto.dozer.types.Value.prototype.getPointValue = function() {
  return /** @type{?proto.dozer.types.PointType} */ (
    jspb.Message.getWrapperField(this, proto.dozer.types.PointType, 11));
};


/**
 * @param {?proto.dozer.types.PointType|undefined} value
 * @return {!proto.dozer.types.Value} returns this
*/
proto.dozer.types.Value.prototype.setPointValue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.dozer.types.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dozer.types.Value} returns this
 */
proto.dozer.types.Value.prototype.clearPointValue = function() {
  return this.setPointValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dozer.types.Value.prototype.hasPointValue = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * @enum {number}
 */
proto.dozer.types.EventType = {
  ALL: 0,
  INSERT_ONLY: 1,
  UPDATE_ONLY: 2,
  DELETE_ONLY: 3
};

/**
 * @enum {number}
 */
proto.dozer.types.OperationType = {
  INSERT: 0,
  DELETE: 1,
  UPDATE: 2
};

/**
 * @enum {number}
 */
proto.dozer.types.Type = {
  UINT: 0,
  INT: 1,
  FLOAT: 2,
  BOOLEAN: 3,
  STRING: 4,
  TEXT: 5,
  BINARY: 6,
  DECIMAL: 7,
  TIMESTAMP: 8,
  DATE: 9,
  BSON: 10,
  POINT: 11
};

goog.object.extend(exports, proto.dozer.types);
