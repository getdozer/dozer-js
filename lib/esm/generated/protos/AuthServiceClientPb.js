/**
 * @fileoverview gRPC-Web generated client stub for dozer.auth
 * @enhanceable
 * @public
 */
// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: auth.proto
/* eslint-disable */
// @ts-nocheck
import * as grpcWeb from 'grpc-web';
import * as auth_pb from './auth_pb';
export class AuthGrpcServiceClient {
    constructor(hostname, credentials, options) {
        this.methodDescriptorgetAuthToken = new grpcWeb.MethodDescriptor('/dozer.auth.AuthGrpcService/getAuthToken', grpcWeb.MethodType.UNARY, auth_pb.GetAuthTokenRequest, auth_pb.GetAuthTokenResponse, (request) => {
            return request.serializeBinary();
        }, auth_pb.GetAuthTokenResponse.deserializeBinary);
        if (!options)
            options = {};
        if (!credentials)
            credentials = {};
        options['format'] = 'text';
        this.client_ = new grpcWeb.GrpcWebClientBase(options);
        this.hostname_ = hostname.replace(/\/+$/, '');
        this.credentials_ = credentials;
        this.options_ = options;
    }
    getAuthToken(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/dozer.auth.AuthGrpcService/getAuthToken', request, metadata || {}, this.methodDescriptorgetAuthToken, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/dozer.auth.AuthGrpcService/getAuthToken', request, metadata || {}, this.methodDescriptorgetAuthToken);
    }
}
